//функция печатающая то, что ей дали на вход
def myFunc(arg) {
    println (arg)
}

pipeline {
    agent any

    // tools {
    //     // Install the Maven version configured as "M3" and add it to the path.
    //     // maven "MAVEN_3.5.2"
    //     // jdk "JDK17"
    // }

    options {
        buildDiscarder(logRotator(numToKeepStr: '2')) //число хранимых билдов
        //? не работает timeout(time: 10, unit: 'MINUTES', type: 'ABORTED') //таймаут аварийного завершения задачи
        timestamps()    //временные метки лога 
        ansiColor('xterm')   //!!!дополнительно - установить плагин ansiColor
    }

    triggers {
        cron('H */4 * * 1-5')   //тригеры запуска
    }

    // parameters {
    //     string defaultValue: 'test string', description: 'введите строку', name: 'MY_STRING' //задаем дополнительные параметры и параметр по умолчанию
    // }

    environment { 
        // DB_URL = "jdbc:postgresql://158.160.59.184:5432/db_webbooks"    //переменная для адреса и мени бд
        GITHUB_REPO_CRED = credentials("18770cb2-d5f4-4e43-9e04-ef562bc35c3a")   //https://github.com/AndreyChuyan/DewOps.git
        GITHUB_REPO_OWNER = "AndreyChuyan"
	    GITHUB_REPO_NAME = "DewOps"
        GITHUB_REPO_URL = "https://github.com/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}.git"
        DB_URL = "jdbc:postgresql://158.160.59.184:5432/db_webbooks"
    }    

//-----stages-
    stages {        
        stage('Checkout') {
            steps {
                echo "=========== start Checkout =============="
                git branch: 'main', changelog: false, credentialsId: '18770cb2-d5f4-4e43-9e04-ef562bc35c3a', poll: false, url: env.GITHUB_REPO_URL
            }
        }

        stage('Print parametrs') {
            steps {
                echo "${params.MY_STRING}"  //вывод и применение заданных параметров
                // echo "${DB_URL}"  //вывод и применение заданных параметров.
            }
        }

        stage('Parallel Stage') {
            parallel {
                stage('hello-world-app') {
                    environment {
                        APP_NAME = "app-hello-world"
                    }

                    tools {
                        maven 'MAVEN_3.8.6' 
                        jdk 'JDK_8'
                    }

                    stages {
                        stage('Build') {
                            steps {
                                echo "=========== start building apps =============="
                                dir('apps/hello-world-app') {
                                    sh "mvn -B -DskipTests -Dmaven.repo.local=${WORKSPACE}/.m2/repository clean package"
                                }
                            }
                        }

                        stage('Archive-Artifacts') {
                            steps {
                                dir('apps/hello-world-app') {
                                    // Run Maven on a Unix agent.
                                    archiveArtifacts 'target/*.jar'
                                }
                            }
                            post {
                            // Clean after build
                                always {
                                    cleanWs(cleanWhenNotBuilt: false,
                                        deleteDirs: true,
                                        disableDeferredWipeout: true,
                                        notFailBuild: true,
                                        patterns:   [[pattern: '.gitignore', type: 'INCLUDE'],
                                                    [pattern: '.propsfile', type: 'EXCLUDE']])
                                }
                            }
                        }

                        stage('Build image and Push to GHCR') {
                            steps {
                                echo "=========== start Push to GHCR=============="
                                dir('apps/hello-world-app') {
                                    sh "docker login ghcr.io --username ${GITHUB_REPO_CRED_USR} --password ${GITHUB_REPO_CRED_PSW}"
                                    sh "docker build -t ghcr.io/andreychuyan/${APP_NAME}:latest ."
                                    sh "docker push ghcr.io/andreychuyan/${APP_NAME}:latest"
                                }
                            }
                        }
                    }
                }


                stage('Webbooks-app') {
                    environment {
                        APP_NAME2 = "app-webbooks"
                    }

                    tools {
                        maven "MAVEN_3.5.2"
                        jdk "JDK17"
                    }   

                    stages {
                        stage('Build') {            
                            steps {
                                script {
                                    if (env.BRANCH_NAME == "main") {
                                        myFunc(params.MY_STRING) //выполнение ранее объявленной функции по условию
                                    }
                                
                                    dir('apps/webbook-java') {
                                        // sh "mvn package -DskipTests"
                                        sh "mvn package"
                                    }
                                }
                            }
                            post {
                                // If Maven was able to run the tests, even if some of the test
                                // failed, record the test results and archive the jar file.
                                success {
                                    dir('apps/webbook-java') {
                                        junit '**/target/surefire-reports/TEST-*.xml'
                                    }
                                }
                            }
                        }    

                        stage('Archive-Artifacts') {
                            // Выполнять только при изменении ветки main, не собирать при pull-request 
                            // when { expression { env.BRANCH_NAME == "main" } }

                            steps {
                                dir('apps/webbook-java') {
                                    // Run Maven on a Unix agent.
                                    archiveArtifacts 'target/*.jar'
                                }
                            }
                            post {
                            // Clean after build
                                always {
                                    cleanWs(cleanWhenNotBuilt: false,
                                        deleteDirs: true,
                                        disableDeferredWipeout: true,
                                        notFailBuild: true,
                                        patterns:   [[pattern: '.gitignore', type: 'INCLUDE'],
                                                    [pattern: '.propsfile', type: 'EXCLUDE']])
                                }
                            }
                        }
                        

                        stage('- app-webbooks - Build image and Push to GHCR') {
                            steps {
                                echo "=========== start Push to GHCR=============="
                                dir('apps/webbook-java') {
                                    sh "docker login ghcr.io --username ${GITHUB_REPO_CRED_USR} --password ${GITHUB_REPO_CRED_PSW}"
                                    sh "docker build -t ghcr.io/andreychuyan/${APP_NAME2}:latest ."
                                    sh "docker push ghcr.io/andreychuyan/${APP_NAME2}:latest"
                                }
                            }
                        }
                    }
                }

                stage('Webbooks-psql') {
                    environment {
                        APP_NAME2_2 = "app-webbooks-psql"
                    }
                    stages {
                        stage('- app-webbooks-psql - Build image and Push to GHCR') {
                            steps {
                                echo "=========== start Push to GHCR=============="
                                dir('apps/webbook-java') {
                                    sh "docker login ghcr.io --username ${GITHUB_REPO_CRED_USR} --password ${GITHUB_REPO_CRED_PSW}"
                                    sh "docker build -t ghcr.io/andreychuyan/${APP_NAME2_2}:latest -f dockerfile--psql12 ."
                                    sh "docker push ghcr.io/andreychuyan/${APP_NAME2_2}:latest"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('delete others image') {
            steps {
                echo "=========== start delete others image =============="
                dir('apps/hello-world-app') {
                    // удалим лишние образы и оставим только latest
                    sh "image_ids_to_delete=\$(docker images | grep -v 'latest' | awk '{if(NR>1) print \$3}') && for id in \$image_ids_to_delete; do docker rmi -f \$id; done"
                }
            }
        }
    }
}